#!/usr/bin/env python
# -*- mode: python -*-

import csv
import hashlib
import os
import sys
import argparse
import subprocess


def parse_arguments(args):
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--import_md5', required=False, action='append', type=str,
                          help="Import md5 file of the specified SNPE version")
    parser.add_argument('-s', '--search',  action='store_true', help="Search the matching SNPE version",
                        required=False)

    args = parser.parse_args()
    return args


class Dumper(object):

    def dump(self, rows):
        pass


class TerminalDumper(Dumper):

    def __init__(self):
        self.headers = ['SNPE Version', 'Variant', 'File Name', 'Fingerprint']
        self.col_size = [len(x) + 1 for x in self.headers]

    def dump(self, rows):
        self._calc_col_size(rows)

        total_size = self.col_size[0] + self.col_size[1] + self.col_size[2] + self.col_size[3] + 4 + 4
        print('-' * total_size)
        for row in rows:
            self._print_row(row.as_list(), self.col_size)
            print('-' * total_size)


    def _calc_col_size(self, rows):
        for row in rows:
            self.col_size[0] = max(self.col_size[0], len(row.version) + 1)
            self.col_size[1] = max(self.col_size[1], len(row.variant) + 1)
            self.col_size[2] = max(self.col_size[2], len(row.file_name) + 1)
            self.col_size[3] = max(self.col_size[3], len(row.fingerprint) + 1)



    def _print_row(self, values, col_sizes):
        str = '| '
        for value, size in zip(values, col_sizes):
            str += '{0:<{1}}|'.format(value, size) + ' '
        str = str[:-1]
        print(str)

class CsvDumper(Dumper):

    def __init__(self, path):
        self.fingerprint_file = os.path.join(path, 'fingerprint.csv')

    def dump(self, rows):
        with open(self.fingerprint_file, 'w') as f:
            csv_file = csv.writer(f)
            for row in rows:
                csv_file.writerow(row.as_list())


class Loader(object):

    def __init__(self, snpe_root=None):
        self.row_table = LibTable()


    def load_table(self, snpe_root):
        return self.find_files_and_digest(snpe_root)

    def find_files_and_digest(self, snpe_root):
        fingerprint_host = snpe_root + os.sep + 'fingerprint.csv'
        table = LibTable()
        if os.path.exists(fingerprint_host):
            with open(fingerprint_host, 'r') as f:
                csv_file = csv.reader(f)
                for row in csv_file:
                    if len(row) != 4:
                        continue
                    lib_row = LibRow(row[0], row[1], row[2], row[3])
                    table.add_row(lib_row)
            return table

        dynamic_link_libs = self._traverse_path_for_files(snpe_root)
        for path, file in dynamic_link_libs:
            fingerprint = self.get_fingerprint(os.path.join(path, file))
            snpe_version = os.path.split(snpe_root)[-1]
            variant = os.path.split(path)[-1]
            lib_row = LibRow(snpe_version, variant, file, fingerprint)
            table.add_row(lib_row)
        return table

    def get_fingerprint(self, file):
        md5 = hashlib.md5()
        with open(file, 'rb') as f:
            while True:
                chunk = f.read(4096)
                if not chunk:
                    break
                md5.update(chunk)

        fingerprint = md5.hexdigest()
        return fingerprint

    def _traverse_path_for_files(self, root):
        '''Traversing the $SNPE_ROOT/lib, except $SNPE_ROOT/lib/python, to get all dynamic link libs
        :type root: str. path to SNPE root
        '''
        path_to_lib = os.path.join(root, 'lib')
        sub_dirs = os.listdir(path_to_lib)
        lib_variants = []
        for dir in sub_dirs:
            if dir != 'python':
                lib_variants.append(dir)

        dynamic_link_libs = []
        for variant in lib_variants:
            for path, dirs, files in os.walk(os.path.join(path_to_lib, variant)):
                for file in files:
                    if file.endswith('.so'):
                        dynamic_link_libs.append((path, file))

        return dynamic_link_libs


class LibRow(object):

    def __init__(self, version=None, variant=None, file_name=None, fingerprint=None):
        self.version = version
        self.variant = variant
        self.file_name = file_name
        self.fingerprint = fingerprint

    def self_inspect(self):
        return (self.version is not None
                and self.variant is not None
                and self.file_name is not None
                and self.fingerprint is not None)

    def as_list(self):
        return [self.version, self.variant, self.file_name, self.fingerprint]


class LibTable(object):

    def __init__(self, rows=None):
        self.anchor = 0
        self.rows = []
        self.table_size = 0
        self.md5sum_list = []
        self.rows_map = {}
        self.add_rows(rows)

    def add_row(self, row):
        if row.self_inspect() and row.fingerprint not in self.md5sum_list:
            self.md5sum_list.append(row.fingerprint)
            self.rows.append(row)
            self.rows_map[row.fingerprint] = row
            self.table_size = len(self.rows)

    def add_rows(self, rows):
        if not rows :
            return
        for row in rows:
            self.add_row(row)

    def fetch_rows(self, size=None):
        if size > self.table_size or not size:
            return self.rows[0:]

        end = self.anchor +size
        begin = self.anchor
        rows = self.rows[begin: end]
        self.anchor += size
        return rows

    def reset_anchor(self):
        self.anchor = 0

    def dump(self, dumper):
        dumper.dump(self.rows)
        terminal_dump = TerminalDumper()
        terminal_dump.dump(self.rows)

class Device(object):

    def __init__(self, temp_dir=None):

        self.temp_dir = temp_dir if temp_dir is not None else Device._get_default_temp_dir()
        self._list_devices()
        self.LD_LIBRARY_PATH = self._get_environ('LD_LIBRARY_PATH')
        self.ADSP_LIBRARY_PATH = self._get_environ('ADSP_LIBRARY_PATH')
        self.potential_path = ['/system/lib', '/system/lib64', '/vendor/lib', '/vendor/lib64']
        if self.LD_LIBRARY_PATH:
            self.potential_path.append(self.LD_LIBRARY_PATH)
        if self.ADSP_LIBRARY_PATH:
            self.potential_path.append(self.ADSP_LIBRARY_PATH)

    def search_all_exists(self, targets):
        path_to_file_map = {}
        for target in targets:
            for path in self.potential_path:
                absolute_path = Device.join_path(path, target)
                if Device.exists(absolute_path):
                    path_to_file_map[absolute_path] = target

        return path_to_file_map

    @staticmethod
    def join_path(root, *args):
        sep = '/'
        path = sep.join(args)
        return root + sep + path

    @staticmethod
    def get_fingerprint(file):
        calc_cmd = 'adb shell "md5sum {0}"'.format(file)
        fingerprint = subprocess.check_output(calc_cmd)
        return fingerprint

    @staticmethod
    def _get_default_temp_dir():
        if os.name == 'posix':
            return os.path.join(os.environ['HOME'], 'temp4snpe')
        elif os.name == 'nt':
            return os.path.join(os.environ['TMP'], 'temp4snpe')

    @staticmethod
    def _get_environ(name):
        try:
            return os.environ[name]
        except KeyError:
            print('No variable named {0}.'.format(name))
            return None

    def pull(self, src, dst):
        pull_cmd = 'adb pull {0} {1}'.format(src, dst)
        error_code = subprocess.call(pull_cmd)
        if error_code != 0:
            print('Failed to calc {0}'.format(src))

    def push(self, src, dst):
        pass

    @staticmethod
    def exists(file):
        test_cmd = 'adb shell "if test -e {0}; then echo yes; fi"'
        test_cmd = test_cmd.format(file)
        exists = subprocess.check_output(test_cmd)
        return exists != b''

    def _list_devices(self):
        pass


def validate_path(paths=()):
    paths = list(paths)
    valid_paths = []
    for path in paths:
        if os.path.exists(path):
            valid_paths.append(path)
    return list(set(valid_paths))


def main():

    libs_cache = 'libs_cache.csv'
    args = parse_arguments(sys.argv)

    loader = Loader()
    table = LibTable()
    cache = []
    if os.path.exists(libs_cache):
        with open(libs_cache, 'r') as f:
            csv_file = csv.reader(f)
            for line in csv_file:
                cache.extend(line)

    if args.import_md5:
        cache.extend(args.import_md5)

    cache = validate_path(cache)

    for md5_lib in cache:
        tab = loader.load_table(md5_lib)
        table.add_rows(tab.rows)
        dumper = CsvDumper(md5_lib)
        tab.dump(dumper)

    with open(libs_cache, 'w') as f:
        libs = csv.writer(f)
        libs.writerow(cache)

    if args.search:
        targets = set()
        for row in table.rows:
            targets.add(row.file_name)
        dev = Device()
        exists_map = dev.search_all_exists(targets)
        recognized_table = recognizer(table, exists_map)


def recognizer(database, candidates):

    table = LibTable()
    for absolute_path, file in candidates.items():
        fingerprint = Device.get_fingerprint(absolute_path).decode('utf-8').split(' ')[0]
        try:
            row = database.rows_map[fingerprint]
            row.file_name = absolute_path
            table.add_row(row)
        except:
            row = LibRow('unknown', 'unknown', absolute_path, fingerprint)
            table.add_row(row)
    return table


def test():
    print(Device._get_environ('LD_LIBRARY_PATH'))


if __name__ == '__main__':
    #test()
    main()


